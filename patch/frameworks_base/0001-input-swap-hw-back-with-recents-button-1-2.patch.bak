From 347bca360b2714282a6725547a229f3bf0274a47 Mon Sep 17 00:00:00 2001
From: sub77 <sub77@ymail.com>
Date: Thu, 5 Oct 2017 06:57:34 +0000
Subject: [PATCH 1/2] input: swap hw back with recents button [1/2]

Change-Id: I4944beddae4cd5c2e6513ce1a410598812df8ea2
Signed-off-by: Carlo Savignano <carlosavignano@aospa.co>
Signed-off-by: Alex Naidis <alex.naidis@linux.com>
---
 .../android/server/input/InputManagerService.java  | 40 ++++++++++++++++++++++
 ...om_android_server_input_InputManagerService.cpp | 31 +++++++++++++++++
 2 files changed, 71 insertions(+)

diff --git a/services/core/java/com/android/server/input/InputManagerService.java b/services/core/java/com/android/server/input/InputManagerService.java
index 907b5c1..90a93ec 100644
--- a/services/core/java/com/android/server/input/InputManagerService.java
+++ b/services/core/java/com/android/server/input/InputManagerService.java
@@ -136,6 +136,9 @@ public class InputManagerService extends IInputManager.Stub
     private static final int MSG_DELIVER_TABLET_MODE_CHANGED = 6;
     private static final int MSG_INPUT_METHOD_SUBTYPE_CHANGED = 7;
 
+    private static final int KEY_MASK_BACK = 0x02;
+    private static final int KEY_MASK_APP_SWITCH = 0x10;
+
     // Pointer to native input manager service object.
     private final long mPtr;
 
@@ -223,6 +226,7 @@ public class InputManagerService extends IInputManager.Stub
             InputChannel fromChannel, InputChannel toChannel);
     private static native void nativeSetPointerSpeed(long ptr, int speed);
     private static native void nativeSetShowTouches(long ptr, boolean enabled);
+    private static native void nativeSetSwapKeys(long ptr, boolean enabled);
     private static native void nativeSetInteractive(long ptr, boolean interactive);
     private static native void nativeReloadCalibration(long ptr);
     private static native void nativeVibrate(long ptr, int deviceId, long[] pattern,
@@ -346,6 +350,7 @@ public class InputManagerService extends IInputManager.Stub
         registerPointerSpeedSettingObserver();
         registerShowTouchesSettingObserver();
         registerAccessibilityLargePointerSettingObserver();
+        registerSwapKeysSettingObserver();
 
         mContext.registerReceiver(new BroadcastReceiver() {
             @Override
@@ -353,12 +358,14 @@ public class InputManagerService extends IInputManager.Stub
                 updatePointerSpeedFromSettings();
                 updateShowTouchesFromSettings();
                 updateAccessibilityLargePointerFromSettings();
+                updateSwapKeysSettings();
             }
         }, new IntentFilter(Intent.ACTION_USER_SWITCHED), null, mHandler);
 
         updatePointerSpeedFromSettings();
         updateShowTouchesFromSettings();
         updateAccessibilityLargePointerFromSettings();
+        updateSwapKeysSettings();
     }
 
     // TODO(BT) Pass in paramter for bluetooth system
@@ -1685,6 +1692,39 @@ public class InputManagerService extends IInputManager.Stub
         return result;
     }
 
+    public void updateSwapKeysSettings() {
+        int setting = getSwapKeysSetting(0);
+        nativeSetSwapKeys(mPtr, setting != 0);
+    }
+
+    private void registerSwapKeysSettingObserver() {
+        if (!canSwapKeys()) return;
+        mContext.getContentResolver().registerContentObserver(
+                Settings.System.getUriFor(Settings.System.SWAP_NAVIGATION_KEYS), true,
+                new ContentObserver(mHandler) {
+                    @Override
+                    public void onChange(boolean selfChange) {
+                        updateSwapKeysSettings();
+                    }
+                }, UserHandle.USER_ALL);
+    }
+
+    private boolean canSwapKeys() {
+        int deviceHardwareKeys = mContext.getResources()
+                .getInteger(com.android.internal.R.integer.config_deviceHardwareKeys);
+        return (deviceHardwareKeys & KEY_MASK_APP_SWITCH) != 0 && (deviceHardwareKeys & KEY_MASK_BACK) != 0;
+    }
+
+    private int getSwapKeysSetting(int defaultValue) {
+        int result = defaultValue;
+        try {
+            result = Settings.System.getIntForUser(mContext.getContentResolver(),
+                    Settings.System.SWAP_NAVIGATION_KEYS, UserHandle.USER_CURRENT);
+        } catch (SettingNotFoundException snfe) {
+        }
+        return result;
+    }
+
     // Binder call
     @Override
     public void vibrate(int deviceId, long[] pattern, int repeat, IBinder token) {
diff --git a/services/core/jni/com_android_server_input_InputManagerService.cpp b/services/core/jni/com_android_server_input_InputManagerService.cpp
index 6f24e7e..1faeb54 100644
--- a/services/core/jni/com_android_server_input_InputManagerService.cpp
+++ b/services/core/jni/com_android_server_input_InputManagerService.cpp
@@ -204,6 +204,7 @@ public:
     void setSystemUiVisibility(int32_t visibility);
     void setPointerSpeed(int32_t speed);
     void setShowTouches(bool enabled);
+    void setSwapKeys(bool enabled);
     void setInteractive(bool interactive);
     void reloadCalibration();
     void setPointerIconType(int32_t iconId);
@@ -283,6 +284,9 @@ private:
         // Pointer capture feature enable/disable.
         bool pointerCapture;
 
+        // Swap back with recents buttons.
+        bool swapKeys;
+
         // Sprite controller singleton, created on first use.
         sp<SpriteController> spriteController;
 
@@ -320,6 +324,7 @@ NativeInputManager::NativeInputManager(jobject contextObj,
         mLocked.pointerGesturesEnabled = true;
         mLocked.showTouches = false;
         mLocked.pointerCapture = false;
+        mLocked.swapKeys = false;
     }
     mInteractive = true;
 
@@ -504,6 +509,7 @@ void NativeInputManager::getReaderConfiguration(InputReaderConfiguration* outCon
         outConfig->pointerGesturesEnabled = mLocked.pointerGesturesEnabled;
 
         outConfig->showTouches = mLocked.showTouches;
+        outConfig->swapKeys = mLocked.swapKeys;
 
         outConfig->pointerCapture = mLocked.pointerCapture;
 
@@ -833,6 +839,22 @@ void NativeInputManager::setPointerCapture(bool enabled) {
             InputReaderConfiguration::CHANGE_POINTER_CAPTURE);
 }
 
+void NativeInputManager::setSwapKeys(bool enabled) {
+    { // acquire lock
+        AutoMutex _l(mLock);
+
+        if (mLocked.swapKeys == enabled) {
+            return;
+        }
+
+        ALOGI("Setting swap keys feature to %s.", enabled ? "enabled" : "disabled");
+        mLocked.swapKeys = enabled;
+    } // release lock
+
+    mInputManager->getReader()->requestRefreshConfiguration(
+            InputReaderConfiguration::CHANGE_SWAP_KEYS);
+}
+
 void NativeInputManager::setInteractive(bool interactive) {
     mInteractive = interactive;
 }
@@ -1454,6 +1476,13 @@ static void nativeSetShowTouches(JNIEnv* /* env */,
     im->setShowTouches(enabled);
 }
 
+static void nativeSetSwapKeys(JNIEnv* /* env */,
+        jclass /* clazz */, jlong ptr, jboolean enabled) {
+    NativeInputManager* im = reinterpret_cast<NativeInputManager*>(ptr);
+
+    im->setSwapKeys(enabled);
+}
+
 static void nativeSetInteractive(JNIEnv* env,
         jclass clazz, jlong ptr, jboolean interactive) {
     NativeInputManager* im = reinterpret_cast<NativeInputManager*>(ptr);
@@ -1605,6 +1634,8 @@ static const JNINativeMethod gInputManagerMethods[] = {
             (void*) nativeSetPointerSpeed },
     { "nativeSetShowTouches", "(JZ)V",
             (void*) nativeSetShowTouches },
+    { "nativeSetSwapKeys", "(JZ)V",
+            (void*) nativeSetSwapKeys },
     { "nativeSetInteractive", "(JZ)V",
             (void*) nativeSetInteractive },
     { "nativeReloadCalibration", "(J)V",
-- 
1.8.3.1

